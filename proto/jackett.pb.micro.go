// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jackett.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for JackettService service

type JackettService interface {
	GetServerConfiguration(ctx context.Context, in *JackettEmpty, opts ...client.CallOption) (*JackettResponse, error)
	GetConfiguredIndexers(ctx context.Context, in *JackettEmpty, opts ...client.CallOption) (*JackettResponse, error)
	Search(ctx context.Context, in *JackettSearch, opts ...client.CallOption) (*JackettResponse, error)
}

type jackettService struct {
	c    client.Client
	name string
}

func NewJackettService(name string, c client.Client) JackettService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &jackettService{
		c:    c,
		name: name,
	}
}

func (c *jackettService) GetServerConfiguration(ctx context.Context, in *JackettEmpty, opts ...client.CallOption) (*JackettResponse, error) {
	req := c.c.NewRequest(c.name, "JackettService.GetServerConfiguration", in)
	out := new(JackettResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackettService) GetConfiguredIndexers(ctx context.Context, in *JackettEmpty, opts ...client.CallOption) (*JackettResponse, error) {
	req := c.c.NewRequest(c.name, "JackettService.GetConfiguredIndexers", in)
	out := new(JackettResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackettService) Search(ctx context.Context, in *JackettSearch, opts ...client.CallOption) (*JackettResponse, error) {
	req := c.c.NewRequest(c.name, "JackettService.Search", in)
	out := new(JackettResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JackettService service

type JackettServiceHandler interface {
	GetServerConfiguration(context.Context, *JackettEmpty, *JackettResponse) error
	GetConfiguredIndexers(context.Context, *JackettEmpty, *JackettResponse) error
	Search(context.Context, *JackettSearch, *JackettResponse) error
}

func RegisterJackettServiceHandler(s server.Server, hdlr JackettServiceHandler, opts ...server.HandlerOption) error {
	type jackettService interface {
		GetServerConfiguration(ctx context.Context, in *JackettEmpty, out *JackettResponse) error
		GetConfiguredIndexers(ctx context.Context, in *JackettEmpty, out *JackettResponse) error
		Search(ctx context.Context, in *JackettSearch, out *JackettResponse) error
	}
	type JackettService struct {
		jackettService
	}
	h := &jackettServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&JackettService{h}, opts...))
}

type jackettServiceHandler struct {
	JackettServiceHandler
}

func (h *jackettServiceHandler) GetServerConfiguration(ctx context.Context, in *JackettEmpty, out *JackettResponse) error {
	return h.JackettServiceHandler.GetServerConfiguration(ctx, in, out)
}

func (h *jackettServiceHandler) GetConfiguredIndexers(ctx context.Context, in *JackettEmpty, out *JackettResponse) error {
	return h.JackettServiceHandler.GetConfiguredIndexers(ctx, in, out)
}

func (h *jackettServiceHandler) Search(ctx context.Context, in *JackettSearch, out *JackettResponse) error {
	return h.JackettServiceHandler.Search(ctx, in, out)
}
